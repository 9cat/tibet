; liquidity TAIL - allows mint by singleton; announces when burned
; author: yakuhito

; used as the TAIL of a pair's liquidity CAT

(mod (
      ; pair / controller SINGLETON_STRUCT
      SINGLETON_STRUCT  ; to quote did_innerpuz.clvm, 
            ;; 'my singleton_struct, formerly a Truth - ((SINGLETON_MOD_HASH, (LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))'
      Truths
      parent_is_cat
      lineage_proof
      delta
      inner_conditions
      tail_solution 
        ; IF MINT:
            ;; (singleton_parent_id singleton_inner_puzzle_hash )
        ; IF BURN:
            ;; (singleton_inner_puzzle_hash my_id)
    )

    (include condition_codes.clvm)
    (include curry.clinc)
    (include cat_truths.clib)

    ; import part of curry-and-treehash.clinc
    ;; the lib can't be imported in the same file as curry.clinc
    (defconstant b32 32)

    (defun-inline size_b32 (var)
        (= (strlen var) b32)
    )

    (defun calculate_coin_id (parent puzzlehash amount)
        (if (all (size_b32 parent) (size_b32 puzzlehash) (> amount -1))
            (sha256 parent puzzlehash amount)
            (x)
        )
    )

    ; takes a lisp tree and returns the hash of it
    (defun sha256tree (TREE)
        (if (l TREE)
            (sha256 2 (sha256tree (f TREE)) (sha256tree (r TREE)))
            (sha256 1 TREE)))
    ; end import of curry-and-treehash.clinc

    ; tail solution to function args
    (defun-inline mint_singleton_parent_id_from_solution (tail_solution) (f tail_solution))
    (defun-inline mint_singleton_inner_puzzle_hash_from_solution (tail_solution) (f (r tail_solution)))
    (defun-inline mint_singleton_amount_from_solution (tail_solution) (f (r (r tail_solution))))

    (defun-inline burn_singleton_inner_puzzle_hash_from_solution (tail_solution) (f tail_solution))
    (defun-inline burn_my_id_from_solution (tail_solution) (f tail_solution))

    ; SINGLETON_STRUCT
    (defun-inline singleton_mod_hash_from_struct (singleton_struct) (f singleton_struct))
    
    ; https://github.com/Chia-Network/chia-blockchain/blob/main/chia/wallet/puzzles/did_innerpuz.clvm#L56
    (defun-inline calculate_full_puzzle_hash (inner_puzzle_hash)
        (curry_hashes_inline (singleton_mod_hash_from_struct SINGLETON_STRUCT)
            inner_puzzle_hash
            (sha256tree SINGLETON_STRUCT)
        )
    )

    (defun-inline calculate_singleton_coin_id (singleton_parent_id singleton_inner_puzzle_hash singleton_amount)
        (calculate_coin_id
            singleton_parent_id
            (calculate_full_puzzle_hash singleton_inner_puzzle_hash)
            singleton_amount
        )
    )

    (defun-inline mint (
        singleton_parent_id
        singleton_inner_puzzle_hash
        singleton_amount
    )
        (if (= delta 0)
            (list
                (list
                    ASSERT_MY_PARENT_ID
                    (calculate_singleton_coin_id singleton_parent_id singleton_inner_puzzle_hash singleton_amount)
                )
            )
            ; else
            (x)
        )
    )

    (defun-inline burn (
            singleton_inner_puzzle_hash
            my_id
            my_amount
        )
        (if (> delta 0)
            (x)
            ; else delta <= 0
            (if (= delta 0)
                (x)
                ; else delta < 0
                (list
                    (list ASSERT_MY_AMOUNT my_amount)
                    (list ASSERT_MY_COIN_ID my_id)
                    (list
                        ASSERT_PUZZLE_ANNOUNCEMENT
                        (calculate_full_puzzle_hash singleton_inner_puzzle_hash)
                        (sha256 my_id my_amount)
                    )
                    (list CREATE_COIN_ANNOUNCEMENT 'Y')
                )
            )
        )
    )

    ; main
    (if (not parent_is_cat)
        (mint
            (mint_singleton_parent_id_from_solution tail_solution)
            (mint_singleton_inner_puzzle_hash_from_solution tail_solution)
            (mint_singleton_amount_from_solution tail_solution)
        )
    ; else
        (burn
            (burn_singleton_inner_puzzle_hash_from_solution tail_solution)
            (burn_my_id_from_solution tail_solution)
            (- 0 delta)
        )
    )
)
