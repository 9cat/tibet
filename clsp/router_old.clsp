; the V1 router
; author: yakuhito

;; only used to create pairs!

(mod (
        ; curried args - used for deploying pair
        PAIR_MOD_HASH
        SINGLETON_MOD_HASH ; pay attention here - it's not SINGLETON_STRUCT
        P2_SINGLETON_MOD_HASH
        CAT_MOD_HASH
        LIQUIDITY_TAIL_MOD_HASH
        SETTLEMENT_PAYMENTS_MOD_HASH
        INVERSE_FEE

        ; required for the router to work
        LAUNCHER_PUZZLE_HASH
        ROUTER_MOD_HASH ; my mod hash (for re-creation)

        ; states
        PAIRS ; (list (c tail_hash singleton_launcher_id))

        ; inputs
        my_coin_id
        new_pair_tail_hash ; hash of TAIL
    )

    (include pair_utils.clib) ; lol
    (include condition_codes.clvm)
    (include curry.clinc)

    (defun check_pair_not_in_pairs (pair_tail_hash pairs_list)
        (if pairs_list
            (if (= pair_tail_hash (f (f pairs_list)))
                ()
                (check_pair_not_in_pairs pair_tail_hash (r pairs_list))
            )
            ; else
            (q . 1)
        )
    )

    (defun-inline new_pair_launcher_id ()
        ; launcher amount needs to be 2, since 1 would mean wrapping it in our singleton top layer puzzle
        (calculate_coin_id my_coin_id LAUNCHER_PUZZLE_HASH (q . 2))
    )

    (defun-inline new_pair_singleton_struct ()
        (c SINGLETON_MOD_HASH (c (new_pair_launcher_id) LAUNCHER_PUZZLE_HASH))
    )

    (defun-inline pair_inner_puzzle_hash (tail_hash)
        (curry_hashes PAIR_MOD_HASH
            (sha256tree PAIR_MOD_HASH)
            (sha256tree (new_pair_singleton_struct)) ; SINGLETON_STRUCT
            (sha256tree P2_SINGLETON_MOD_HASH)
            (sha256tree CAT_MOD_HASH)
            (sha256tree LIQUIDITY_TAIL_MOD_HASH)
            (sha256tree SETTLEMENT_PAYMENTS_MOD_HASH)
            (sha256tree tail_hash)
            (sha256tree INVERSE_FEE)
            (sha256tree (q . 0)) ; initial liquidity
            (sha256tree (q . 0)) ; initial xch reserve
            (sha256tree (q . 0)) ; initial toke nreserve
        )
    )

    (defun-inline pair_puzzle_hash (tail_hash)
        (curry_hashes_inline SINGLETON_MOD_HASH
            (sha256tree (new_pair_singleton_struct))
            (pair_inner_puzzle_hash tail_hash)
        )
    )

    (defun-inline my_puzzle_hash (new_pairs)
        (curry_hashes_inline ROUTER_MOD_HASH
            (sha256tree PAIR_MOD_HASH)
            (sha256tree SINGLETON_MOD_HASH)
            (sha256tree P2_SINGLETON_MOD_HASH)
            (sha256tree CAT_MOD_HASH)
            (sha256tree LIQUIDITY_TAIL_MOD_HASH)
            (sha256tree SETTLEMENT_PAYMENTS_MOD_HASH)
            (sha256tree INVERSE_FEE)
            (sha256tree LAUNCHER_PUZZLE_HASH)
            (sha256tree ROUTER_MOD_HASH)
            (sha256tree new_pairs)
        )
    )

    (defun-inline output_conditions (pair_launcher_id)
        (list
            (list CREATE_COIN
                (my_puzzle_hash
                    (merge_list
                        PAIRS
                        (list (c new_pair_tail_hash pair_launcher_id))
                    )
                )
                (q . 1)
            )
            (list ASSERT_MY_COIN_ID my_coin_id)
            (list CREATE_COIN LAUNCHER_PUZZLE_HASH (q . 2))
            ; make sure the pair singleton is launched
            (list
                ASSERT_COIN_ANNOUNCEMENT
                (sha256
                    pair_launcher_id
                    (sha256tree (list
                        (pair_puzzle_hash new_pair_tail_hash)
                        (q . 1)
                        ()
                    ))
                )
            )
        )
    )

    ; main
    (if (check_pair_not_in_pairs new_pair_tail_hash PAIRS)
        (output_conditions
            (new_pair_launcher_id new_pair_tail_hash)
        )
        ; else
        (x)
    )
)