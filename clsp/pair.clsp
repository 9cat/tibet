; the singleton that powers a pair
; author: yakuhito

; modeled after https://github.com/Uniswap/v1-contracts/blob/master/contracts/uniswap_exchange.vy

(mod (
        PAIR_MOD_HASH ; sha256 of this module / puzzle (uncurried)
        SINGLETON_STRUCT  ; to quote did_innerpuz.clvm, 
            ;; 'my singleton_struct, formerly a Truth - ((SINGLETON_MOD_HASH, (LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))'
        P2_SINGLETON_MOD_HASH ; sha256tree of the p2_singleton module (uncurried)
        CAT_MOD_HASH ; sha256tree of the cat_v2 module (uncurried)
        LIQUIDITY_TAIL_MOD_HASH ; sha256 tree of the liquidity TAIL (uncurried)
        SETTLEMENT_PAYMENTS_MOD_HASH ; sha256 tree of settlement_payments.clvm (not that it has any curried arguments, but still)

        TAIL_HASH ; identifies the token this pair holds
        INVERSE_FEE ; this cleverly-named variable is calculated as 1000 - FEE
            ;; FEE is, for example, 7 for 0.7% (will get divided by a thousand)
            ;; meaning INVERSE_FEE is 993 (user swaps 99.3% of their input assets to output - tokens or XCH)
            ;; 0.7% is kept as lp fee

        LIQUIDITY ; holds the total number of liquidity tokens in existence
        XCH_RESERVE ; 'contract balance' of XCH
        TOKEN_RESERVE ; 'contract balance' of tokens

        coin_ids ; needed for every spend - this coin & reserves they are (re)created in tandem
            ;; format: (my_coin_id xch_reserve_coin_id token_reserve_coin_id)
        action ; action the user wants to take
            ;; 0 - add liquidity (money printer go brr)
            ;; 1 - remove liquidity (sorry to see you go!)
            ;; 2 - XCH to token (sell XCH, buy token)
            ;; 3 - token to XCH (buy XCH, sell token)
        params ; params for the called method
            ;; add liquidity: (token_amount to_puzzle_hash [xch_amount])
            ;;;      [xch_amount] - optional; ONLY taken into account IF there is no liquidity (this is the initial deposit)
            ;; remove liquidity: (liquidity_tokens_amount liquidity_inner_puzzle_hash liquidity_parent_id)
            ;; xch to token: (xch_amount)
            ;; token to xch: (token_amount)
    )
    
    ; libs
    (include curry.clinc)
    (include condition_codes.clvm)

    (include pair_utils.clib)

    ; params
    ;; -1 - coin ids
    (defun-inline my_coin_id_from_coin_ids (coin_ids) (f coin_ids))
    (defun-inline xch_reserve_coin_id_from_coin_ids (coin_ids) (f (r coin_ids)))
    (defun-inline token_reserve_coin_id_from_coin_ids (coin_ids) (f (r (r coin_ids))))

    ;; 0 - add liquidity
    (defun-inline add_liquidity_token_amount_from_params (params) (f params))
    (defun-inline add_liquidity_to_puzzle_hash_from_params (params) (f (r params)))
    (defun-inline add_liquidity_xch_amount_from_params (params) (f (r (r params))))

    ;; 1 - remove liquidity
    (defun-inline remove_liquidity_liquidity_tokens_amount_from_params (params) (f params))
    (defun-inline remove_liqiudity_liquidity_inner_puzzle_hash_from_params (params) (f (r params)))
    (defun-inline remove_liqiudity_liquidity_parent_id_from_params (params) (f (r (r coin_ids))))

    ;; 2 - xch to token
    (defun-inline xch_to_token_xch_amount_from_params (params) (f params))

    ;; 3 - token to xch
    (defun-inline token_to_xch_token_amount_from_params (params) (f params))

    ;; liquidity-related converters
    (defun-inline xch_amount_from_token_amount (token_amount)
        (/ (* token_amount XCH_RESERVE) TOKEN_RESERVE)
    )

    (defun-inline xch_amount_from_liquidity_amount (liquidity_amount)
        (/ (* liquidity_amount XCH_RESERVE) LIQUIDITY)
    )

    (defun-inline token_amount_from_liquidity_amount (liquidity_amount)
        (/ (* liquidity_amount TOKEN_RESERVE) LIQUIDITY)
    )

    (defun-inline liquidity_minted_from_token_amount (token_amount)
        (- (logior (/ (* token_amount LIQUIDITY) TOKEN_RESERVE) 1) 1) ; make sure it's even
    )

    ;; exchange-related

    ; https://github.com/Uniswap/v1-contracts/blob/master/contracts/uniswap_exchange.vy#L106
    (defun-inline get_input_price (input_amount input_reserve output_reserve)
        (/
            ; numerator
            (* output_reserve (* input_amount INVERSE_FEE))
            ; denominator
            (+ (* input_reserve 1000) (* input_amount INVERSE_FEE))
        )
    )

    ;; deposit/reserve-related
    (defun-inline p2_singleton_puzzle_hash ()
        (curry_hashes_inline P2_SINGLETON_MOD_HASH
            (sha256tree (singleton_mod_hash_from_struct SINGLETON_STRUCT))
            (sha256tree (singleton_launcher_from_struct SINGLETON_STRUCT))
            (sha256tree (singleton_launcher_puzzle_hash_from_struct SINGLETON_STRUCT))
        )
    )

    (defun-inline settlement_announcement (my_coin_id amount)
        (sha256tree
            (list
                my_coin_id
                (list (p2_singleton_puzzle_hash) amount)
            )
        )
    )

    (defun-inline assert_xch_reserve_condition (my_coin_id amount)
        (list
            ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
                SETTLEMENT_PAYMENTS_MOD_HASH
                (settlement_announcement my_coin_id amount)
            )
        )
    )

    (defun-inline cat_puzzle_hash (tail_hash inner_puzzle_hash)
        (curry_hashes_inline CAT_MOD_HASH
            (sha256tree CAT_MOD_HASH)
            (sha256tree tail_hash)
            inner_puzzle_hash
        )
    )

    (defun-inline settlement_cat_announcement (my_coin_id tail_hash amount)
        (sha256tree
            (list
                my_coin_id
                (list
                    (cat_puzzle_hash tail_hash (p2_singleton_puzzle_hash))
                    amount
                )
            )
        )
    )

    (defun-inline assert_token_reserve_condition (my_coin_id amount)
        (list
            ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
                (cat_puzzle_hash TAIL_HASH SETTLEMENT_PAYMENTS_MOD_HASH)
                (settlement_cat_announcement
                    my_coin_id
                    TAIL_HASH
                    amount
                )
            )
        )
    )

    (defun-inline create_token_condition (tail_hash inner_puzzle_hash amount)
        (list
            CREATE_COIN
            (cat_puzzle_hash tail_hash inner_puzzle_hash)
            amount    
        )
    )

    (defun-inline create_liquidity_tokens_condition (amount to_puzzle_hash)
        (create_token_condition
            (curry_hashes_inline LIQUIDITY_TAIL_MOD_HASH (sha256tree SINGLETON_STRUCT))
            to_puzzle_hash
            amount
        )
    )

    (defun-inline burn_liquidity_condition (liquidity_token_amount liquidity_parent_id liquidity_inner_puzzle_hash)
        (list
            CREATE_PUZZLE_ANNOUNCEMENT
            ; program with no solution needed
            (sha256 
                (calculate_coin_id
                    liquidity_parent_id
                    (cat_puzzle_hash (curry_hashes_inline LIQUIDITY_TAIL_MOD_HASH (sha256tree SINGLETON_STRUCT)) liquidity_inner_puzzle_hash)
                    liquidity_token_amount
                )
                liquidity_token_amount
            )
        )
    )

    (defun-inline assert_liquidity_burn_condition (liquidity_token_amount liquidity_parent_id liquidity_inner_puzzle_hash)
        (list
            ASSERT_COIN_ANNOUNCEMENT
            (sha256
                (calculate_coin_id
                    liquidity_parent_id
                    (cat_puzzle_hash (curry_hashes_inline LIQUIDITY_TAIL_MOD_HASH (sha256tree SINGLETON_STRUCT)) liquidity_inner_puzzle_hash)
                    liquidity_token_amount
                )
                'Y'
            )
        )
    )

    ;; self-propagation

    (defun-inline recreate_self_condition (new_liquidity new_xch_reserve new_token_reserve)
        (list
            CREATE_COIN
            (curry_hashes_inline PAIR_MOD_HASH
                (sha256tree PAIR_MOD_HASH)
                (sha256tree SINGLETON_STRUCT)
                (sha256tree P2_SINGLETON_MOD_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree LIQUIDITY_TAIL_MOD_HASH)
                (sha256tree SETTLEMENT_PAYMENTS_MOD_HASH)

                (sha256tree TAIL_HASH)
                (sha256tree INVERSE_FEE)

                (sha256tree new_liquidity)
                (sha256tree new_xch_reserve)
                (sha256tree new_token_reserve)
            )
            1
        )
    )

    ; begin main methods
    ;; gt0 = liquidity > 0
    ;; 0 = liquidity = 0
    (defun-inline add_liquidity_gt0_ok (
        token_amount
    )
        (all
            (> token_amount 0)
            (> (xch_amount_from_token_amount token_amount) 0)
            (> (liquidity_minted_from_token_amount token_amount) 0)
        )
    )

    (defun-inline add_liquidity_gt0_liquidity (
            token_amount
        )
        (+ LIQUIDITY (liquidity_minted_from_token_amount token_amount))
    )

    (defun-inline add_liquidity_gt0_xch_reserve (
            token_amount
        )
        (+ XCH_RESERVE (xch_amount_from_token_amount token_amount))
    )

    (defun-inline add_liquidity_gt0_token_reserve (
            token_amount
        )
        (+ TOKEN_RESERVE token_amount)
    )

    (defun-inline add_liquidity_gt0_conditions (
            token_amount
            to_puzzle_hash
        )
        (list
            (create_liquidity_tokens_condition (liquidity_minted_from_token_amount token_amount) to_puzzle_hash)
        )
    )

    (defun-inline add_liquidity_0_ok (
        xch_amount
        token_amount
    )
        (all
            (> token_amount 99) ; min token amount: 0.1
            (> xch_amount 999999999) ; min XCH amount: 1000000000 (4 cents at the time of writing this, probably less than a million in the future)
            (= (* 2 (/ xch_amount 2)) xch_amount) ; xch_amount is even
        )
    )

    (defun-inline add_liquidity_0_liquidity (
            xch_amount
        )
        xch_amount
    )

    (defun-inline add_liquidity_0_xch_reserve (
            xch_amount
        )
        xch_amount
    )

    (defun-inline add_liquidity_0_token_reserve (
            token_amount
        )
        token_amount
    )

    (defun-inline add_liquidity_0_conditions (
            xch_amount
            to_puzzle_hash
        )
        (list
            (create_liquidity_tokens_condition xch_amount to_puzzle_hash)
        )

    )

    ; remove liquidity
    (defun-inline remove_liqiudity_ok (
        liquidity_tokens_amount
    )
        (all
            (> LIQUIDITY 0)
            (> LIQUIDITY liquidity_tokens_amount)
            (= (* 2 (/ liquidity_tokens_amount 2)) liquidity_tokens_amount) ; is even
        )
    )

    (defun-inline remove_liqiudity_liquidity (
            liquidity_tokens_amount
        )
        (- LIQUIDITY liquidity_tokens_amount)
    )

    (defun-inline remove_liqiudity_xch_reserve (
            liquidity_tokens_amount
        )
        (- XCH_RESERVE (xch_amount_from_liquidity_amount liquidity_tokens_amount))
    )

    (defun-inline remove_liqiudity_token_reserve (
            liquidity_tokens_amount
        )
        (- TOKEN_RESERVE (token_amount_from_liquidity_amount liquidity_tokens_amount))
    )

    (defun-inline remove_liquidity_conditions (
            liquidity_parent_id
            liquidity_inner_puzzle_hash
            liquidity_tokens_amount
        )
        (list
            (burn_liquidity_condition liquidity_tokens_amount liquidity_parent_id liquidity_inner_puzzle_hash)
            (assert_liquidity_burn_condition liquidity_tokens_amount liquidity_parent_id liquidity_inner_puzzle_hash)
        )
    )

    ; xch to token
    (defun-inline xch_to_token_ok (
        xch_amount
    )
        (all
            (> LIQUIDITY 0)
            (> xch_amount 0)
        )
    )

    (defun-inline xch_to_token_xch_reserve (
            xch_amount
        )
        (+ XCH_RESERVE xch_amount)
    )

    (defun-inline xch_to_token_token_reserve (
            xch_amount
        )
        (- TOKEN_RESERVE (get_input_price xch_amount XCH_RESERVE TOKEN_RESERVE))
    )

    ; token to xch
    (defun-inline token_to_xch_ok (
        token_amount
    )
        (all
            (> LIQUIDITY 0)
            (> token_amount 0)
        )
    )

    (defun-inline token_to_xch_xch_reserve (
            token_amount
        )
        (- XCH_RESERVE xch_amount (get_input_price token_amount TOKEN_RESERVE XCH_RESERVE))
    )

    (defun-inline token_to_xch_token_reserve (
            token_amount
        )
        (+ TOKEN_RESERVE token_amount)
    )

    (defun-inline create_output_conditions (
            my_coin_id
            xch_reserve_coin_id
            token_reserve_coin_id
            ok_condition
            new_liquidity
            new_xch_reserve
            new_token_reserve
            extra_output_conditions
            is_initial_liquidity_deposit
        )
        (if ok_condition
            (merge_list
                (list
                    ; assert my id
                    (list ASSERT_MY_COIN_ID my_coin_id)
                
                    ; create new XCH reserve
                    (assert_xch_reserve_condition
                        my_coin_id
                        new_xch_reserve
                    )

                    ; create new token reserve
                    (assert_token_reserve_condition
                        my_coin_id
                        new_token_reserve
                    )

                    ; recreate self
                    (recreate_self_condition
                        new_liquidity
                        new_xch_reserve
                        new_token_reserve
                    )
                )
                (if is_initial_liquidity_deposit
                    extra_output_conditions
                    (merge_list extra_output_conditions (list
                        ; spend XCH reserve
                        (list CREATE_PUZZLE_ANNOUNCEMENT xch_reserve_coin_id)
                        (list ASSERT_COIN_ANNOUNCEMENT (sha256 xch_reserve_coin_id '$'))

                        ; spend token reserve
                        (list CREATE_PUZZLE_ANNOUNCEMENT token_reserve_coin_id)
                        (list ASSERT_COIN_ANNOUNCEMENT (sha256 token_reserve_coin_id '$'))
                    ))   
                )
            )
            ; else
            (x)
        )
    )

    ; function codes
    (defconstant ACTION_ADD_LIQUIDITY 0)
    (defconstant ACTION_REMOVE_LIQUIDITY 1)
    (defconstant ACTION_XCH_TO_TOKEN 2)
    (defconstant ACTION_TOKEN_TO_XCH 3)

    ; main
    (if (> action ACTION_REMOVE_LIQUIDITY)
        (if (= action ACTION_XCH_TO_TOKEN)
            (create_output_conditions
                (my_coin_id_from_coin_ids coin_ids)
                (xch_reserve_coin_id_from_coin_ids coin_ids)
                (token_reserve_coin_id_from_coin_ids coin_ids)
                (xch_to_token_ok
                    (xch_to_token_xch_amount_from_params params)
                )
                LIQUIDITY
                (xch_to_token_xch_reserve
                    (xch_to_token_xch_amount_from_params params)
                )
                (xch_to_token_token_reserve
                    (xch_to_token_xch_amount_from_params params)
                )
                ()
                ()
            )
            ; else action > ACTION_REMOVE_LIQUIDITY, action != ACTION_XCH_TO_TOKEN -> action = ACTION_TOKEN_TO_XCH
            (create_output_conditions
                (my_coin_id_from_coin_ids coin_ids)
                (xch_reserve_coin_id_from_coin_ids coin_ids)
                (token_reserve_coin_id_from_coin_ids coin_ids)
                (token_to_xch_ok
                    (token_to_xch_token_amount_from_params params)
                )
                LIQUIDITY
                (token_to_xch_xch_reserve
                    (token_to_xch_token_amount_from_params params)
                )
                (token_to_xch_token_reserve
                    (token_to_xch_token_amount_from_params params)
                )
                ()
                ()
            )
        )
        ; else action <= ACTION_REMOVE_LIQUIDITY
        (if (= action ACTION_REMOVE_LIQUIDITY)
            (create_output_conditions
                (my_coin_id_from_coin_ids coin_ids)
                (xch_reserve_coin_id_from_coin_ids coin_ids)
                (token_reserve_coin_id_from_coin_ids coin_ids)
                (remove_liqiudity_ok
                    (remove_liquidity_liquidity_tokens_amount_from_params params)
                )
                (remove_liqiudity_liquidity
                    (remove_liquidity_liquidity_tokens_amount_from_params params)
                )
                (remove_liqiudity_xch_reserve
                    (remove_liquidity_liquidity_tokens_amount_from_params params)
                )
                (remove_liqiudity_token_reserve
                    (remove_liquidity_liquidity_tokens_amount_from_params params)
                )
                (remove_liquidity_conditions
                    (remove_liqiudity_liquidity_parent_id_from_params params)
                    (remove_liqiudity_liquidity_inner_puzzle_hash_from_params params)
                    (remove_liquidity_liquidity_tokens_amount_from_params params)
                )
                ()
            )
            ; else action < ACTION_REMOVE_LIQUIDITY -> action = ACTION_ADD_LIQUIDITY
            ; add_liquidity behaves differently if the 
            (if (= LIQUIDITY 0)
                (create_output_conditions
                    (my_coin_id_from_coin_ids coin_ids)
                    (xch_reserve_coin_id_from_coin_ids coin_ids)
                    (token_reserve_coin_id_from_coin_ids coin_ids)
                    (add_liquidity_0_ok
                        (add_liquidity_xch_amount_from_params params)
                        (add_liquidity_token_amount_from_params params)
                    )
                    (add_liquidity_0_liquidity
                        (add_liquidity_xch_amount_from_params params)
                    )
                    (add_liquidity_0_xch_reserve
                        (add_liquidity_xch_amount_from_params params)
                    )
                    (add_liquidity_0_token_reserve
                        (add_liquidity_token_amount_from_params params)
                    )
                    (add_liquidity_0_conditions
                        (add_liquidity_xch_amount_from_params params)
                        (add_liquidity_to_puzzle_hash_from_params params)
                    )
                    1
                )
                ; else liquidity > 0
                (create_output_conditions
                    (my_coin_id_from_coin_ids coin_ids)
                    (xch_reserve_coin_id_from_coin_ids coin_ids)
                    (token_reserve_coin_id_from_coin_ids coin_ids)
                    (add_liquidity_gt0_ok
                        (add_liquidity_token_amount_from_params params)
                    )
                    (add_liquidity_gt0_liquidity
                        (add_liquidity_token_amount_from_params params)
                    )
                    (add_liquidity_gt0_xch_reserve
                        (add_liquidity_token_amount_from_params params)
                    )
                    (add_liquidity_gt0_token_reserve
                        (add_liquidity_token_amount_from_params params)
                    )
                    (add_liquidity_gt0_conditions
                        (add_liquidity_token_amount_from_params params)
                        (add_liquidity_to_puzzle_hash_from_params params)
                    )
                    ()
                )
            )
        )
    )
)

; NOTES FOR FUTURE SELF

; DO NOT REMOVE UNTIL CODE IS FINISHED: test all CREATE_COINs; make sure they are even