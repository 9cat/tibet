; the singleton that powers a pair
; author: yakuhito

; modeled after https://github.com/Uniswap/v1-contracts/blob/master/contracts/uniswap_exchange.vy

(mod (
        PAIR_MOD_HASH ; sha256 of this module / puzzle (uncurried)
        SINGLETON_STRUCT  ; to quote did_innerpuz.clvm, 
            ;; 'my singleton_struct, formerly a Truth - ((SINGLETON_MOD_HASH, (LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))'
        P2_SINGLETON_MOD_HASH ; sha256tree of the p2_singleton module (uncurried)
        CAT_MOD_HASH ; sha256tree of the cat_v2 module (uncurried)
        LIQUIDITY_TAIL_MOD_HASH ; sha256 tree of the singleton delegated tail module (uncurried)

        TAIL_HASH ; identifies the token this pair holds
        FEE ; 0.3%

        LIQUIDITY ; holds the total number of liquidity tokens in existence
        XCH_RESERVE ; 'contract balance' of XCH
        TOKEN_RESERVE ; 'contract balance' of tokens

        reserve_coin_ids ; needed for every spend - they are (re)created in tandem
            ;; format: (xch_reserve_coin_id token_reserve_coin_id)
        action ; action the user wants to take
            ;; 0 - add liquidity (money printer go brr)
            ;; 1 - remove liquidity (sorry to see you go!)
            ;; 2 - XCH to token (sell XCH, buy token)
            ;; 3 - token to XCH (buy XCH, sell token)
        params ; params for the called method
            ;; add liquidity: (token_amount to_puzzle_hash [xch_amount])
            ;;;      [xch_amount] - optional; ONLY taken into account IF there is no liquidity (this is the initial deposit)
            ;; remove liquidity: (liquidity_tokens_amount liquidity_inner_puzzle_hash)
            ;; xch to token: (xch_amount)
            ;; token to xch: (token_amount)
    )
    
    ; libs
    (include curry.clinc)

    ; from curry-and-treehash.clinc (which can't be included in the same file as curry.clinc *-*)
    (defun sha256tree (TREE)
        (if (l TREE)
            (sha256 2 (sha256tree (f TREE)) (sha256tree (r TREE)))
            (sha256 1 TREE)))

    ; function codes
    (defconstant ACTION_ADD_LIQUIDITY 0)
    (defconstant ACTION_REMOVE_LIQUIDITY 1)
    (defconstant ACTION_XCH_TO_TOKEN 2)
    (defconstant ACTION_TOKEN_TO_XCH 3)

    ; params
    ;; -1 - coin ids
    (defun-inline xch_reserve_coin_id_from_coin_ids (coin_ids) (f coin_ids))
    (defun-inline token_reserve_coin_id_from_coin_ids (coin_ids) (f (r coin_ids)))

    ;; 0 - add liquidity
    (defun-inline add_liquidity_token_amount_from_params (params) (f params))
    (defun-inline add_liquidity_to_puzzle_hash_from_params (params) (f (r params)))
    (defun-inline add_liquidity_xch_amount_from_params (params) (f (r params)))

    ;; 1 - remove liquidity
    (defun-inline remove_liquidity_liquidity_tokens_amount_from_params (params) (f params))
    (defun-inline remove_liqiudity_liquidity_inner_puzzle_hash_from_params (params) (f (r params)))

    ; helper functions

    ; SINGLETON_STRUCT
    (defun-inline singleton_mod_hash_from_struct (singleton_struct) (f singleton_struct))
    (defun-inline singleton_launcher_from_struct (singleton_struct) (f (r singleton_struct)))
    (defun-inline singleton_launcher_puzzle_hash_from_struct (singleton_struct) (f (r (r singleton_struct))))

    ;; liquidity-related converters
    (defun-inline xch_amount_from_token_amount (token_amount)
        (+ (logior (/ (* token_amount XCH_SUPPLY) TOKEN_SUPPLY) 1) 1); make sure it's even
    )

    (defun-inline xch_amount_from_liquidity_amount (liquidity_amount)
        (- (logior (/ (* liquidity_amount XCH_SUPPLY) LIQUIDITY) 1) 1); make sure it's even
    )

    (defun-inline token_amount_from_liquidity_amount (liquidity_amount)
        (- (logior (/ (* liquidity_amount TOKEN_SUPPLY) LIQUIDITY) 1) 1); make sure it's even
    )

    (defun-inline liquidity_minted_from_token_amount (token_amount)
        (- (logior (/ (* token_amount LIQUIDITY) TOKEN_SUPPLY) 1) 1) ; make sure it's even
    )

    ;; deposit-related
    (defun-inline p2_singleton_puzzle_hash (SINGLETON_STRUCT)
        (curry_hashes_inline P2_SINGLETON_MOD_HASH
            (singleton_mod_hash_from_struct SINGLETON_STRUCT)
            (singleton_launcher_from_struct SINGLETON_STRUCT)
            (singleton_launcher_puzzle_hash_from_struct SINGLETON_STRUCT)
        )
    )

    (defun-inline create_xch_reserve_condition (amount)
        (list
            CREATE_COIN
            (p2_singleton_puzzle_hash SINGLETON_STRUCT)
            amount    
        )
    )

    (defun-inline cat_puzzle_hash (tail_hash inner_puzzle_hash)
        (curry_hashes_inline CAT_MOD_HASH
            (sha256tree CAT_MOD_HASH)
            (sha256tree tail_hash)
            inner_puzzle_hash
        )
    )

    (defun-inline create_token_condition (tail_hash inner_puzzle_hash amount)
        (list
            CREATE_COIN
            (cat_puzzle_hash tail_hash inner_puzzle_hash)
            amount    
        )
    )

    (defun-inline create_token_reserve_condition (amount)
        (create_token_condition TAIL_HASH (p2_singleton_puzzle_hash SINGLETON_STRUCT) amount)
    )

    (defun-inline create_liquidity_tokens_condition (amount to_puzzle_hash)
        (create_token_condition
            (curry_hashes_inline LIQUIDITY_TAIL_MOD_HASH SINGLETON_STRUCT)
            to_puzzle_hash
            amount
        )
    )

    (defun-inline create_liquidity_delegated_puzzle (amount to_puzzle_hash)
        (list 
            (list CREATE_COIN to_puzzle_hash amount)
        )
    )

    (defun-inline create_liquidity_condition (amount to_puzzle_hash)
        (list
            CREATE_COIN_ANNOUNCEMENT
            ; program with no solution needed
            (sha256
                (create_liquidity_delegated_puzzle amount to_puzzle_hash)
                ()
            )
        )
    )

    (defun-inline assert_liquidity_creation_condition (amount to_puzzle_hash)
        (list
            ASSERT_PUZZLE_ANNOUNCEMENT
            (cat_puzzle_hash (curry_hashes_inline LIQUIDITY_TAIL_MOD_HASH SINGLETON_STRUCT) to_puzzle_hash)
            (sha256
                (create_liquidity_delegated_puzzle amount to_puzzle_hash)
                ()
            )
        )
    )

    (defun-inline burn_liquidity_delegated_puzzle (liquidity_token_amount)
        (list 
            (list ASSERT_MY_AMOUNT liquidity_token_amount)
            (list CREATE_COIN () -113)
        )
    )

    (defun-inline burn_liquidity_condition (liquidity_token_amount)
        (list
            CREATE_COIN_ANNOUNCEMENT
            ; program with no solution needed
            (sha256
                (burn_liquidity_delegated_puzzle liquidity_token_amount)
                ()
            )
        )
    )

    (defun-inline assert_liquidity_burn_condition (liquidity_token_amount liquidity_inner_puzzle_hash)
        (list
            ASSERT_PUZZLE_ANNOUNCEMENT
            (cat_puzzle_hash (curry_hashes_inline LIQUIDITY_TAIL_MOD_HASH SINGLETON_STRUCT) liquidity_inner_puzzle_hash)
            (sha256
                (burn_liquidity_delegated_puzzle liquidity_token_amount)
                ()
            )
        )
    )

    ;; self-propagation

    (defun-inline recreate_self_condition (new_liquidity new_xch_reserve new_token_reserve)
        (list
            CREATE_COIN
            (curry_hashes_inline PAIR_MOD_HASH
                ; TODO: review these parameters and their order
                PAIR_MOD_HASH
                SINGLETON_STRUCT
                P2_SINGLETON_MOD_HASH
                CAT_MOD_HASH
                LIQUIDITY_TAIL_MOD_HASH

                TAIL_HASH
                FEE

                new_liquidity
                new_xch_reserve
                new_token_reserve
            )
            1
        )
    )

    ; begin main methods

    (defun-inline add_liquidity (xch_reserve_coin_id token_reserve_coin_id token_amount to_puzzle_hash params)
        ; step 1: check user-supplied param(s) is/are ok
        (if (all
                (> token_amount 0)
                (= (* 2 (/ token_amount 2)) token_amount) ; is even
                (> (xch_amount_from_token_amount token_amount) 0)
                (> (liquidity_minted_from_token_amount token_amount) 0)
                (= (strlen to_puzzle_hash) 32)
            )
            (if (> liquidity 0)
                (list
                    ; spend XCH reserve
                    (list CREATE_PUZZLE_ANNOUNCEMENT xch_reserve_coin_id)
                    (list ASSERT_COIN_ANNOUNCEMENT xch_reserve_coin_id '$')

                    ; create new XCH reserve
                    (create_xch_reserve_condition
                        (+ XCH_RESERVE (xch_amount_from_token_amount token_amount))
                    )

                    ; spend token reserve
                    (list CREATE_PUZZLE_ANNOUNCEMENT token_reserve_coin_id)
                    (list ASSERT_COIN_ANNOUNCEMENT token_reserve_coin_id '$')

                    ; create new token reserve
                    (create_token_reserve_condition
                        (+ TOKEN_RESERVE token_amount)
                    )

                    ; mint liquidity tokens
                    (create_liquidity_tokens_condition (liquidity_minted_from_token_amount token_amount) to_puzzle_hash)
                    (create_liquidity_condition (liquidity_minted_from_token_amount token_amount) to_puzzle_hash)
                    ; assert liquidity tokens were minted (if not in this tx, they will be stuck forever)
                    (assert_liquidity_creation_condition (liquidity_minted_from_token_amount token_amount) to_puzzle_hash)

                    ; recreate self
                    (recreate_self_condition
                        (+ LIQUIDITY (liquidity_minted_from_token_amount token_amount))
                        (+ XCH_RESERVE (xch_amount_from_token_amount token_amount))
                        (+ TOKEN_RESERVE token_amount)
                    )
                )
                ; else liquidity <= 0
                (if (all
                        (= liquidity 0)
                        (=
                            (* 2 (/ (add_liquidity_xch_amount_from_params params) 2))
                            (add_liquidity_xch_amount_from_params params)
                        ) ; is even
                    )
                    (list
                        ; create new XCH reserve
                        (create_xch_reserve_condition
                            (add_liquidity_xch_amount_from_params params)
                        )

                        ; create new token reserve
                        (create_token_reserve_condition
                            token_amount
                        )

                        ; mint liquidity tokens
                        (create_liquidity_tokens_condition (add_liquidity_xch_amount_from_params params) to_puzzle_hash)
                        (create_liquidity_condition (add_liquidity_xch_amount_from_params params) to_puzzle_hash)
                        ; assert liquidity tokens were minted (if not in this tx, they will be stuck forever)
                        (assert_liquidity_creation_condition (add_liquidity_xch_amount_from_params params) to_puzzle_hash)


                        ; recreate self
                        (recreate_self_condition
                            (add_liquidity_xch_amount_from_params params)
                            (add_liquidity_xch_amount_from_params params)
                            token_amount
                        )
                    )
                    ; else liquidity < 0 or hax - wtf???
                    (x)
                )
            )
            ; else
            (x) ; prevent hax - say no to hacks
        )
    )

    (defun-inline remove_liqiudity (xch_reserve_coin_id token_reserve_coin_id liquidity_tokens_amount liquidity_inner_puzzle_hash)
        (if (all
                (> LIQUIDITY 0)
                (> LIQUIDITY liquidity_tokens_amount)
                (= (* 2 (/ liquidity_tokens_amount 2)) liquidity_tokens_amount) ; is even
            )
            (list
                ; spend XCH reserve
                (list CREATE_PUZZLE_ANNOUNCEMENT xch_reserve_coin_id)
                (list ASSERT_COIN_ANNOUNCEMENT xch_reserve_coin_id '$')

                ; create new XCH reserve
                (create_xch_reserve_condition
                    (- XCH_RESERVE (xch_amount_from_liquidity_amount liquidity_tokens_amount))
                )

                ; spend token reserve
                (list CREATE_PUZZLE_ANNOUNCEMENT token_reserve_coin_id)
                (list ASSERT_COIN_ANNOUNCEMENT token_reserve_coin_id '$')

                ; create new token reserve
                (create_token_reserve_condition
                    (- TOKEN_RESERVE (token_amount_from_liquidity_amount liquidity_tokens_amount))
                )

                ; burn liquidity tokens
                (burn_liquidity_condition liquidity_tokens_amount)
                ; assert liquidity tokens were burned
                (assert_liquidity_burn_condition liquidity_tokens_amount liquidity_inner_puzzle_hash)

                ; recreate self
                (recreate_self_condition
                    (- LIQUIDITY liquidity_tokens_amount)
                    (- XCH_RESERVE (xch_amount_from_liquidity_amount liquidity_tokens_amount))
                    (- TOKEN_RESERVE (token_amount_from_liquidity_amount liquidity_tokens_amount))
                )
            )
            ; else - hax attempt
            (x)
        )
    )

    ; main
    (if (= action ACTION_ADD_LIQUIDITY)
        (add_liquidity
            (xch_reserve_coin_id_from_coin_ids reserve_coin_ids)
            (token_reserve_coin_id_from_coin_ids reserve_coin_ids)
            (add_liquidity_token_amount_from_params params)
            (add_liquidity_to_puzzle_hash_from_params params)
            params
        )
        ; else
        (if (= action ACTION_REMOVE_LIQUIDITY)
            (remove_liqiudity
                (xch_reserve_coin_id_from_coin_ids reserve_coin_ids)
                (token_reserve_coin_id_from_coin_ids reserve_coin_ids)
                (remove_liquidity_liquidity_tokens_amount_from_params params)
                (remove_liqiudity_liquidity_inner_puzzle_hash_from_params params)
            )
            ; else
            (if (= action ACTION_XCH_TO_TOKEN)
                (x) ; XCH to token
                ; else
                (if = action ACTION_TOKEN_TO_XCH)
                    (x) ; token to XCH
                    ; else
                    (x) ; merge coins
            )
        )
    )
)

; NOTES FOR FUTURE SELF
; deposit tokens - harder than initially imagined; how can we be sure that resulting TAILs are valid?
; DO NOT REMOVE UNTIL CODE IS FINISHED: test all CREATE_COINs; make sure they are even